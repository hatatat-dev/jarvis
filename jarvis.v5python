{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nleft_motor_a = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT8)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 255, MM, 1)\nIntake = Motor(Ports.PORT5, GearSetting.RATIO_18_1, False)\nFlywheel_motor_a = Motor(Ports.PORT13, GearSetting.RATIO_6_1, False)\nFlywheel_motor_b = Motor(Ports.PORT14, GearSetting.RATIO_6_1, True)\nFlywheel = MotorGroup(Flywheel_motor_a, Flywheel_motor_b)\nExpansion = Motor(Ports.PORT7, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_left_shoulder_control_motors_stopped = True\ncontroller_1_right_shoulder_control_motors_stopped = True\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, controller_1_left_shoulder_control_motors_stopped, controller_1_right_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # stop the motors if the brain is calibrating\n            if drivetrain_inertial.is_calibrating():\n                left_drive_smart.stop()\n                right_drive_smart.stop()\n                while drivetrain_inertial.is_calibrating():\n                    sleep(25, MSEC)\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3\n            # right = axis2\n            drivetrain_left_side_speed = controller_1.axis3.position()\n            drivetrain_right_side_speed = controller_1.axis2.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonL1/buttonL2 status\n            # to control Intake\n            if controller_1.buttonL1.pressing():\n                Intake.spin(FORWARD)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif controller_1.buttonL2.pressing():\n                Intake.spin(REVERSE)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif not controller_1_left_shoulder_control_motors_stopped:\n                Intake.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_left_shoulder_control_motors_stopped = True\n            # check the buttonR1/buttonR2 status\n            # to control Flywheel\n            if controller_1.buttonR1.pressing():\n                Flywheel.spin(FORWARD)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif controller_1.buttonR2.pressing():\n                Flywheel.spin(REVERSE)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif not controller_1_right_shoulder_control_motors_stopped:\n                Flywheel.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_right_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n#endregion VEXcode Generated Robot Configuration\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\nmyVariable = 0\ntest = 0\nmessage1 = Event()\nDriver = Event()\n\ndef cat():\n    global myVariable, test, message1, Driver, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n    brain.screen.print(\"    /\\\\_____/\\\\\")\n    brain.screen.next_row()\n    brain.screen.print(\"   /  o   o  \\\\\")\n    brain.screen.next_row()\n    brain.screen.print(\"  ( ==  ^  == )\")\n    brain.screen.next_row()\n    brain.screen.print(\"   )         (\")\n    brain.screen.next_row()\n    brain.screen.print(\"  (           )\")\n    brain.screen.next_row()\n    brain.screen.print(\" ( /  \\\\   /  \\\\ )\")\n    brain.screen.next_row()\n    brain.screen.print(\"(__(__)___(__)__)\")\n    brain.screen.next_row()\n\ndef Cat_animation():\n    global myVariable, test, message1, Driver, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    wait(0.5, SECONDS)\n    brain.screen.set_cursor(2, 1)\n    brain.screen.clear_row(2)\n    brain.screen.set_cursor(brain.screen.row(), 1)\n    brain.screen.print(\"   / o   o   \\\\\")\n    wait(0.5, SECONDS)\n    brain.screen.set_cursor(2, 1)\n    brain.screen.clear_row(2)\n    brain.screen.set_cursor(brain.screen.row(), 1)\n    brain.screen.print(\"   /  o   o  \\\\\")\n    wait(0.5, SECONDS)\n    brain.screen.set_cursor(2, 1)\n    brain.screen.clear_row(2)\n    brain.screen.set_cursor(brain.screen.row(), 1)\n    brain.screen.print(\"   /   o   o \\\\\")\n    wait(0.5, SECONDS)\n    brain.screen.set_cursor(2, 1)\n    brain.screen.clear_row(2)\n    brain.screen.set_cursor(brain.screen.row(), 1)\n    brain.screen.print(\"   /  o   o  \\\\\")\n    wait(0.5, SECONDS)\n    brain.screen.set_cursor(2, 1)\n    brain.screen.clear_row(2)\n    brain.screen.set_cursor(brain.screen.row(), 1)\n    brain.screen.print(\"   /  -   -  \\\\\")\n    wait(0.5, SECONDS)\n    brain.screen.set_cursor(2, 1)\n    brain.screen.clear_row(2)\n    brain.screen.set_cursor(brain.screen.row(), 1)\n    brain.screen.print(\"   /  o   o  \\\\\")\n    wait(0.5, SECONDS)\n    brain.screen.set_cursor(2, 1)\n    brain.screen.clear_row(2)\n    brain.screen.set_cursor(brain.screen.row(), 1)\n    brain.screen.print(\"   /  -   -  \\\\\")\n    wait(0.5, SECONDS)\n    brain.screen.set_cursor(2, 1)\n    brain.screen.clear_row(2)\n    brain.screen.set_cursor(brain.screen.row(), 1)\n    brain.screen.print(\"   /  o   o  \\\\\")\n\ndef when_started1():\n    global myVariable, test, message1, Driver, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    pass\n\ndef onauton_autonomous_0():\n    global myVariable, test, message1, Driver, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    drivetrain.set_drive_velocity(100, PERCENT)\n    Intake.set_velocity(100, PERCENT)\n    Flywheel.set_velocity(100, PERCENT)\n    Flywheel.spin(REVERSE)\n    # right\n    drivetrain.drive_for(REVERSE, 27, INCHES, wait=True)\n    drivetrain.turn_for(LEFT, 90, DEGREES, wait=True)\n    # roller\n    drivetrain.drive(FORWARD)\n    wait(0.5, SECONDS)\n    Intake.spin_for(FORWARD, 260, DEGREES, wait=True)\n    drivetrain.drive_for(REVERSE, 4, INCHES, wait=True)\n    # right low goal\n    drivetrain.turn_for(LEFT, 90, DEGREES, wait=True)\n    Intake.spin(REVERSE)\n    wait(2, SECONDS)\n    Intake.stop()\n\ndef ondriver_drivercontrol_0():\n    global myVariable, test, message1, Driver, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    # use while testing\n    cat()\n    Flywheel.set_velocity(65, PERCENT)\n    Intake.set_velocity(100, PERCENT)\n    controller_1.screen.print(Flywheel.torque(TorqueUnits.NM), precision=6 if vexcode_controller_1_precision is None else vexcode_controller_1_precision)\n    brain.screen.print(\"VEXcode\")\n    while True:\n        Cat_animation()\n        wait(5, MSEC)\n\ndef ondriver_drivercontrol_1():\n    global myVariable, test, message1, Driver, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    while True:\n        if controller_1.buttonY.pressing():\n            Expansion.spin_for(FORWARD, 90, DEGREES, wait=True)\n        wait(5, MSEC)\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    auton_task_0 = Thread( onauton_autonomous_0 )\n    # wait for the driver control period to end\n    while( competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n    driver_control_task_0 = Thread( ondriver_drivercontrol_0 )\n    driver_control_task_1 = Thread( ondriver_drivercontrol_1 )\n\n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n    driver_control_task_0.stop()\n    driver_control_task_1.stop()\n\n\n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Intake","leftDir":"false","right":"Flywheel","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[20,10,11,1,8],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"357","unit":"mm","wheelbase":"255","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[5],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[13,14],"name":"Flywheel","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[7],"name":"Expansion","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"","minVersion":"2.4.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}